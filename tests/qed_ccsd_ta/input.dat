sys.path.insert(0, '../../../')
import math
import hilbert

molecule {
  0 1

  O            0.000000000000     0.000000000000    -0.065655108083
  H            0.000000000000    -0.757365949175     0.520997104927
  H            0.000000000000     0.757365949175     0.520997104927

  # do not reorient the molecule.
  # The orientation relative to the cavity polarization affects the result
  no_reorient 
  no_com
  
  # symmetry is not supported for QED-CC calculations
  symmetry c1
}

set {
  basis sto-3g # basis set for the molecular orbitals
  reference rhf # all calculations use a spin-orbital basis
  
  # CD algorithm is recommended for QED-CC calculations. DF is also supported, but not PK. 
  scf_type cd 
  cholesky_tolerance 1e-12
  diis_max_vecs 25
  
  # convergence criteria for the SCF and CC iterations
  e_convergence 1e-8
  r_convergence 1e-8
  d_convergence 1e-8
}
 
lam = 0.05 # coupling factor (this value is for a 0.74 nmÂ³ cavity)
frequency = 0.1 # frequency of the cavity mode
coupling_strength = (lam / math.sqrt(2.0 * frequency)) # coupling strength
set hilbert {
  maxiter 10000 # maximum number of iterations for the groundstate CC methods
  
  # set the cavity parameters
  cavity_frequency         [0.0, 0.0, $frequency]
  cavity_coupling_strength [0.0, 0.0, $coupling_strength]
  
  QED_USE_RELAXED_ORBITALS  true # do relax the SCF orbitals within the cavity
  ROTATE_POLARIZATION_AXIS   XYZ # rotate the cavity polarization from the XYZ axis to ZXY, or YZX.
  
  NUMBER_ROOTS                10 # number of excited states to compute
  MAXDIM                       8 # maximum dimension of the EOM-CC subspace (multiplied by NUMBER_ROOTS)
  INDIM                        4 # initial dimension of the EOM-CC subspace (multiplied by NUMBER_ROOTS)
  
  EOM_MAXITER                250 # maximum number of iterations for the EOM-CC iterations
  MAD_NUM_THREADS              1 # the number of MADNESS threads to use with mpirun 
                                 # Note: if not using mpi or using eom, set this to 1 for best performanc
  TILE_SIZE                   -1 # the spacing between tiles in a tiledarray (-1 places all data on a single tile)
                                 # Note: if not using mpi or using eom, set this to -1 for best performance
}

# memory for Psi4 (note: this is for the integrals, not the CC calculation which does not restrict memory usage)
memory 1000 MB

# run the QED-CC calculations

en1, wfn = energy('qed-ccsd', return_wfn=True)        # QED-CCSD-21 w/o TiledArray
en2, wfn = energy('qed-ccsd-21', return_wfn=True)     # QED-CCSD-21 w/ TiledArray
en3, wfn = energy('qed-ccsd-22', return_wfn=True)     # QED-CCSD-22 w/ TiledArray

# print the energies
print('QED-CCSD-21: ', en1)
print('QED-CCSD-21 (TiledArray): ', en2)
print('QED-CCSD-22 (TiledArray): ', en3)

set hilbert EOM_TYPE EE
en4, wfn = energy('eom-qed-ccsd-21', return_wfn=True) # EOM-EE-QED-CCSD-21 w/ TiledArray

set hilbert EOM_TYPE EA
en5, wfn = energy('eom-qed-ccsd-21', return_wfn=True) # EOM-EA-QED-CCSD-21 w/ TiledArray
